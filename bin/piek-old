#! /usr/bin/env ruby

require 'optparse'
require "uri"
require "net/http"
require "json"
Options = Struct.new(:hub, :activity, :device, keyword_init: true)

# Control Harmony using the CLI, requires homeassistant with a functioning Remote set up

HASS_IP="100.74.48.103"
HA_TELENET=23576662
HA_LG=65335294
HA_ATV=58438469

VERSION='0.0.2'
VERSION_NAME='it-me-piek'
HARMONY_API_URL="http://#{HASS_IP}:8123"
HARMONY_CONF = JSON.parse(DATA.read)

class Parser
  def self.parse(options)
    args = Options.new(hub: "piek")

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: piek [options]"

      opts.on("-uHUB", "--hub=HUB", "Hub to use") do |le_hub|
        args.hub = le_hub
      end

      opts.on("-aACTIVITY", "--change-activity=ACTIVITY", "Acitivty to use") do |activity|
        activity_names = HARMONY_CONF["Activities"].values
        found = (HARMONY_CONF["Activities"].detect{|k,v| v =~ /#{activity}/i} || []).first.to_s
        # Only here to raise the key error
        HARMONY_CONF["Activities"].fetch(found)
        args.activity = found
      rescue KeyError
        puts "Needs to be one of: #{activity_names}"
      end

      opts.on("-dDevice", "--device=Device", "Device to use") do |le_device|
        device_names = HARMONY_CONF["Devices"].keys
        name = device_names.detect{|s| s.downcase =~ /#{le_device}/}

        args.device = HARMONY_CONF["Devices"].fetch(name)["id"]
      rescue KeyError
        puts "Needs to be one of: #{device_names}"
      end

      opts.on("-h", "--help", "Prints this help") do
        puts opts
        puts HARMONY_API_URL
        exit
      end
    end

    opt_parser.parse!(options)
    return args
  end
end
options = Parser.parse(ARGV)

class PiekAPI
  def initialize(base_url:, hass_token:, entity_id: "remote.piek")
    @base_url = base_url
    @hass_token = hass_token
    @entity_id = entity_id
  end

  def hub
    "piek"
  end

  def devices

  end

  # https://www.home-assistant.io/integrations/harmony/
  #
  # Turn off all devices that were switched on from the start of the current activity.
  def turn_off
    do_request post_request("/api/services/remote/turn_off")
  end

  # Start an activity. Will start the default activity from
  # configuration.yaml if no activity is specified. The specified
  # activity can either be the activity name or the activity ID from the
  # configuration file written to your Home Assistant configuration
  # directory.
  def turn_on(activity:)
    do_request post_request("/api/services/remote/turn_on", {
                              entity_id: @entity_id,
                              activity: activity
                            })
  end

  def send_command(commands:, device:)
    do_request post_request("/api/services/remote/send_command", {
                              entity_id: @entity_id,
                              device: device,
                              command: Array(commands)
                            })
  end

  def do_request(request)
    response = connection.request(request)
    parsed_response = JSON.parse(response.body) rescue response.body
    parsed_response
  end

  def get_request(path, params = {})
    uri = URI.parse(File.join(@base_url, path))
    uri.query = URI.encode_www_form(params)
    request = Net::HTTP::Get.new(uri)
    request.add_field("Content-Type", "application/json")
    request.add_field("Accept", "application/json")
    request.add_field("Authorization", "Bearer #{@hass_token}")
    request
  end


  def post_request(path, params = {})
    uri = URI.parse(File.join(@base_url, path))
    uri.query = URI.encode_www_form(params)
    request = Net::HTTP::Post.new(uri)
    request.add_field("Content-Type", "application/json")
    request.add_field("Accept", "application/json")
    request.add_field("Authorization", "Bearer #{@hass_token}")
    request.body = JSON.dump(params)
    request
  end

  def connection
    uri = URI.parse(@base_url)
    @http = Net::HTTP.new(uri.host, uri.port)
    @http.use_ssl = (uri.scheme == "https")
    @http
  end
end

_height, width = `stty siz`.scan(/\d+/).map(&:to_i)
Signal.trap "SIGWINCH" do
  _height, width = `stty size`.scan(/\d+/).map(&:to_i)
  puts width
end


def magic(r, cols = 2)
  ze_length = r.length / cols
  arrs = r.each_slice(ze_length).to_a
  first = arrs.shift
  first.zip(*arrs)
end
magic(%w(o hai there dotter ino))

def print_info_a(width, data)
  padding = 2
  data ||= {}
  max_label = data.max_by {|r| r.length}.length
  onewidth = max_label + padding + 5
  columns = width/onewidth
  columns = 1 if columns < 1
  extra_padding = ((width % onewidth)/columns - 2*padding).clamp(0,10)

  magic(data.sort, columns).each do |arr|
    values = arr.compact.inject([]) do |result, r|
      label = r
      s = "\e[1m%s\e[0m%s" % [label.ljust(max_label), " " * padding]
      result << s
      result
    end

    puts values.join(" " * (padding+extra_padding))
  end
end

def print_info_h(width, data)
  padding = 2
  data ||= {}
  max_slug = data.max_by {|r| r["slug"].length}["slug"].length
  max_label = data.max_by {|r| r["label"].length}["label"].length
  onewidth = max_slug + padding + max_label + padding
  columns = width/onewidth
  columns = 1 if columns < 1
  extra_padding = (width % onewidth)/columns - 2*padding

  magic(data.sort_by{|r| r["slug"]}, columns).each do |arr|
    values = arr.compact.inject([]) do |result, r|
      slug = r["slug"]
      label = r["label"]
      s = "\e[1m%s\e[0m %s %s%s" % [slug.ljust(max_slug), " " * padding, label.to_s.ljust(max_label), " " * padding]
      result << s
      result
    end
    puts values.join(" " * (padding+extra_padding))
  end
end

api = PiekAPI.new(base_url: HARMONY_API_URL, hass_token: ENV.fetch("HASS_TOKEN"))
# api = PiekAPI.new(base_url: "https://requestbin.io/1n3kmnx1", hass_token: ENV.fetch("HASS_TOKEN"))

if options.activity
  puts api.turn_on(activity: options.activity)
elsif options.device
  commands = ARGV
  available_commands = HARMONY_CONF["Devices"].each_value.detect {|h| h["id"] == options.device}["commands"].map(&:downcase)
  unknown_commands = commands - available_commands

  if unknown_commands.any?
    puts <<~STR
These mean NOTHING to me: #{unknown_commands.join(",")}
You should be using one of these:

STR
    print_info_a(width, available_commands)
  else
    puts api.send_command(device: options.device, commands: ARGV)
  end
else
  puts "You need to specify a device, with the -d flag"
  puts "One of these"
  print_info_a(width, HARMONY_CONF["Devices"].keys)
end

__END__

{
    "Activities": {
        "-1": "PowerOff",
        "30890611": "Watch Smart TV",
        "30897620": "Watch TV",
        "36333764": "Apple Teevee",
        "48943182": "Gaming"
    },
    "Devices": {
        "Apple TV": {
            "commands": [
                "VolumeDown",
                "VolumeUp",
                "DirectionDown",
                "DirectionLeft",
                "DirectionRight",
                "DirectionUp",
                "Select",
                "Stop",
                "Play",
                "Rewind",
                "Pause",
                "FastForward",
                "SkipBack",
                "SkipForward",
                "Menu",
                "Back",
                "Home"
            ],
            "id": "58438469"
        },
        "LG TV": {
            "commands": [
                "PowerOff",
                "PowerOn",
                "PowerToggle",
                ".",
                "-",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "Mute",
                "VolumeDown",
                "VolumeUp",
                "ChannelPrev",
                "ChannelDown",
                "ChannelUp",
                "DirectionDown",
                "DirectionLeft",
                "DirectionRight",
                "DirectionUp",
                "OK",
                "Stop",
                "Play",
                "Rewind",
                "Pause",
                "FastForward",
                "Record",
                "Back",
                "Teletext",
                "List",
                "PictureMode",
                "SoundMode",
                "Sleep",
                "Green",
                "Red",
                "Blue",
                "Yellow",
                "Guide",
                "Info",
                "Exit",
                "Aspect",
                "PictureMode",
                "Netflix",
                "Settings",
                "Amazon",
                "Home",
                "InputAv1",
                "InputComponent1",
                "InputHdmi1",
                "InputHdmi2",
                "InputHdmi3",
                "InputHdmi4",
                "InputNext",
                "InputTv",
                "In-Start",
                "In-Stop",
                "ServiceMenu",
                "Simplink",
                "SmartMenu",
                "SportMode"
            ],
            "id": "50973046"
        },
        "LG TV (2)": {
            "commands": [
                "PowerOff",
                "PowerOn",
                "PowerToggle",
                ".",
                "-",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "Mute",
                "VolumeDown",
                "VolumeUp",
                "ChannelPrev",
                "ChannelDown",
                "ChannelUp",
                "DirectionDown",
                "DirectionLeft",
                "DirectionRight",
                "DirectionUp",
                "OK",
                "Stop",
                "Play",
                "Rewind",
                "Pause",
                "FastForward",
                "Record",
                "Back",
                "Teletext",
                "List",
                "PictureMode",
                "SoundMode",
                "Sleep",
                "Green",
                "Red",
                "Blue",
                "Yellow",
                "Guide",
                "Info",
                "Exit",
                "Aspect",
                "PictureMode",
                "Netflix",
                "Settings",
                "Amazon",
                "Home",
                "InputAv1",
                "InputComponent1",
                "InputHdmi1",
                "InputHdmi2",
                "InputHdmi3",
                "InputHdmi4",
                "InputNext",
                "InputTv",
                "In-Start",
                "In-Stop",
                "ServiceMenu",
                "Simplink",
                "SmartMenu",
                "SportMode"
            ],
            "id": "65335294"
        },
        "Telenet DVR": {
            "commands": [
                "PowerToggle",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "Clear",
                "Mute",
                "VolumeDown",
                "VolumeUp",
                "ChannelDown",
                "ChannelUp",
                "DirectionDown",
                "DirectionLeft",
                "DirectionRight",
                "DirectionUp",
                "Ok",
                "Stop",
                "Play",
                "Rewind",
                "Pause",
                "FastForward",
                "Record",
                "Return",
                "Menu",
                "Back",
                "Teletext",
                "Green",
                "Red",
                "Blue",
                "Yellow",
                "Guide",
                "Exit",
                "Delete",
                "-/--",
                "Communication",
                "Extra",
                "Help",
                "Home",
                "InputNext",
                "Library"
            ],
            "id": "23576662"
        }
    }
}
