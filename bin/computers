#!/usr/bin/env -S ruby
require "tempfile"
require "pathname"
require "sqlite3"
require "securerandom"
require "digest/sha1"

LAST_RUN_AT = "2023-06-01"
$db = db = SQLite3::Database.new(File.expand_path("~/browser/history.db"))
$db.define_function("uuid") { SecureRandom.uuid }
$db.define_function("sha1") {|s| Digest::SHA1.hexdigest(s.to_s) }

$db.execute(<<~SQL)
  CREATE TABLE if not exists history (
    id varchar(500) PRIMARY KEY,
    signature TEXT NOT NULL UNIQUE,
    url TEXT NOT NULL,
    visited_at TEXT NOT NULL,
    browser TEXT NOT NULL,
    title TEXT
  );

  CREATE INDEX if not exists idx_title ON history(title);
  CREATE INDEX if not exists idx_url ON history(url);
  CREATE INDEX if not exists idx_visited_at ON history(visited_at);
  CREATE INDEX if not exists idx_signature ON history(signature);
SQL

before = $db.execute("select browser, count(*) from history group by browser").to_h

class Browser
  attr_accessor :name, :sql, :db_paths
  def initialize(name:, sql:, paths:)
    @name = name
    @sql = sql
    @db_paths = paths
  end
end

safari = Browser.new(name: "safari", sql: <<~SQL, paths: [File.expand_path("~/Library/Safari/History.db")])
      SELECT
        datetime(hv.visit_time + 978307200, 'unixepoch', 'localtime'),
        hi.url,
        hv.title
      FROM
        history_visits hv,
        history_items hi
      WHERE
        hv.history_item = hi.id
     SQL

path = Pathname.new(File.expand_path("~/Library/Application Support/Firefox/Profiles/"))
paths = path.glob("*").select {|f| f.directory?}.flat_map do |path|
  path.glob("*.sqlite").select{|f| f.basename.to_s == "places.sqlite"}
end.map(&:to_s)
firefox = Browser.new(name: "firefox", sql: <<~SQL, paths: paths)
  SELECT
    datetime(moz_historyvisits.visit_date/1000000,'unixepoch'),
    moz_places.url,
    moz_places.title
  FROM
    moz_places,
    moz_historyvisits
  WHERE
    moz_places.id = moz_historyvisits.place_id
  SQL

path = Pathname.new(File.expand_path("~/Library/Application Support/Arc/User Data/"))
arc = Browser.new(name: "arc", sql: <<~SQL, paths: path.glob("**/History").map(&:to_s))
  SELECT
    datetime(last_visit_time/1000000-11644473600, "unixepoch"),
    url,
    title
  FROM
    urls
  SQL

path = Pathname.new(File.expand_path("~/Library/Application Support/Google/Chrome/"))
chrome = Browser.new(name: "chrome", sql: <<~SQL, paths: path.glob("**/History").map(&:to_s))
  SELECT
    datetime(last_visit_time/1000000-11644473600, "unixepoch"),
    url,
    title
  FROM
    urls
  SQL

puts "Exporting history after #{LAST_RUN_AT} to csv's..."
[safari, firefox, chrome, arc].each do |browser|
  puts "Doing #{browser.name}"
  browser.db_paths.each.with_index(1) do |db_path, index|
    raise "No such thing #{db_path}" unless File.exist?(db_path)
    puts "  => #{File.basename(db_path)}"
    sql = <<~SQL
      with browser_data(visited_at, url, title) as (
        #{browser.sql}
      )
      select
        visited_at,
        url,
        title,
        "#{browser.name}" as browser,
        sha1(visited_at || url) as signature,
        uuid() as id
      from
        browser_data
      where
        visited_at > :last_run_at
    SQL
    begin
      $db.execute("attach database :db_path as attached", db_path: db_path)
    rescue SQLite3::BusyException
      puts "    it was locked, so working against a copy"
      FileUtils.cp(db_path, "hi-there.db")
      $db.execute("attach database :db_path as attached", db_path: "hi-there.db")
    end
    $db.transaction do
      insert = $db.prepare(<<~SQL)
        insert or ignore into history(visited_at, url, title, browser, signature, id)
               values ( :visited_at, :url, :title, :browser, :signature, :id )
        SQL
      $db.execute(sql, last_run_at: LAST_RUN_AT) do |visited_at, url, title, browser_name, signature, id|
        insert.execute(
          visited_at: visited_at,
          url: url,
          title: title,
          browser: browser_name,
          signature: signature,
          id: id
        )
      end
    end
    $db.execute("detach database attached")
    File.unlink("hi-there.db") if File.exist?("hi-there.db")
  end
end

after = $db.execute("select browser, count(*) from history group by browser").to_h
after.each do |browser, count|
  puts "#{browser} now has #{count} (+#{count - (before[browser] || 0)})"
end
