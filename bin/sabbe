#! /usr/bin/env ruby

$start = Time.new(2023,3,14,9,53,0,"-04:00")

def duration_to_sec(duration)
  seconds, minutes, hours = duration.split(":").reverse

  (hours.to_i * 60 * 60) + (minutes.to_i * 60) + seconds.to_i
end

def humanize(secs)
  parts = [[60, [:second, :seconds]],
           [60, [:minute, :minutes]],
           [24, [:hour, :hours]],
           [1000, [:day, :days]]].collect { |count, (singular, plural)|
    if secs > 0
      secs, n = secs.divmod(count)
      count = n.to_i
      next unless count > 0
      if count > 1
        "#{count} #{plural}"
      else
        "#{count} #{singular}"
      end
    end
  }.compact.reverse
  last = parts.pop
  if parts.count > 0
    "#{parts.join(", ")} and #{last}"
  else
    last
  end
end

def loops_printer(loops)
  loops.map.with_index(1) do |(start_loop, finish_loop), index|
    if start_loop
      if finish_loop
        took = humanize(duration_to_sec(finish_loop) - duration_to_sec(start_loop))
        puts "|#{index}| #{start_loop} | #{finish_loop} | #{took} |"
      else
        puts "|#{index}| #{start_loop} |          | ongoing for #{humanize(Time.now - duration_to_sec(start_loop) - $start)}|"
      end
    else
      puts "|#{index}|          |          | not started yet|"
    end
  end
end

remaining = $start + duration_to_sec("60:00:00") - Time.now
runners = {
  "Karel Sabbe" => [
    ["00:00:00", nil],
    [nil, nil],
    [nil, nil],
    [nil, nil],
    [nil, nil],
  ],
  "Greig Hamilton" => [
    ["00:00:00", nil],
    [nil, nil],
    [nil, nil],
    [nil, nil],
    [nil, nil],
  ]
}

runners.each do |name, loops|
  puts name
  puts "-----------"
  loops_printer(loops)
  puts
end

puts
puts "Remaining: #{humanize(remaining)}"
